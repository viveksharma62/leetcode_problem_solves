class Solution {
	public static String takeCombinations(int digit, String alfabet)
	{
		int index,n;
		StringBuilder rez = new StringBuilder();
		switch(digit){
			case 7 -> {
				index = 3 * (digit-2);
				n=4;
			}
			case 8 ->
			{
				index = 3 * (digit-2) + 1;
				n=3;
			}
			case 9 ->
			{
				index = 3 * (digit-2) + 1;
				n=4;
			}
			default ->
			{
				index = 3 * (digit-2);
				n=3;
			}
 		}
		for(int i=0;i<n;i++)
			rez.append(alfabet.charAt(index + i));

		return rez.toString();
	}

	public static List<String> letterCombinations(String digits) {
		int digit;
		char c = 'a';
		String alfabet = "abcdefghijklmnopqrstuvwxyz";
		List<String> thisCombinations = new ArrayList<>();
		List<String> allCombinations = new ArrayList<>();
		for (int i = 0; i < digits.length(); i++) {
			digit = digits.charAt(i) - '0';
			thisCombinations.add(takeCombinations(digit, alfabet));
		}
		int x = 0;
		StringBuilder rezString = new StringBuilder();
		if(thisCombinations.size()!=0) {
			for (int i = 0; i < thisCombinations.get(0).length(); i++) {
				rezString.append(thisCombinations.get(0).charAt(i));
				if (thisCombinations.size() == 1) {
					allCombinations.add(rezString.toString());
				} else {
					for (int j = 0; j < thisCombinations.get(1).length(); j++) {
						rezString.append(thisCombinations.get(1).charAt(j));
						if (thisCombinations.size() == 2) {
							allCombinations.add(rezString.toString());

						} else {
							for (int k = 0; k < thisCombinations.get(2).length(); k++) {
								rezString.append(thisCombinations.get(2).charAt(k));
								if (thisCombinations.size() == 3) {
									allCombinations.add(rezString.toString());
								} else {
									for (int l = 0; l < thisCombinations.get(3).length(); l++) {
										rezString.append(thisCombinations.get(3).charAt(l));
										allCombinations.add(rezString.toString());
										rezString.deleteCharAt(3);
									}
								}
								rezString.deleteCharAt(2);
							}
						}
						rezString.deleteCharAt(1);
					}
				}
				rezString.deleteCharAt(0);
			}
		}
		return allCombinations;
	}
}
